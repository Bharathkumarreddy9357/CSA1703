print("192372258 bharath)
import heapq

class Node:
    def __init__(self, position, g=0, h=0):
        self.position = position
        self.g = g  # Cost from start to current node
        self.h = h  # Heuristic cost from current node to goal
        self.f = g + h  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal, grid):
    open_list = []
    closed_list = set()
    start_node = Node(start, 0, heuristic(start, goal))
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.position == goal:
            return current_node.g  # Return the cost of the path

        closed_list.add(current_node.position)

        for new_position in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            if (0 <= node_position[0] < len(grid)) and (0 <= node_position[1] < len(grid[0])) and grid[node_position[0]][node_position[1]] == 0:
                if node_position in closed_list:
                    continue

                g_cost = current_node.g + 1
                h_cost = heuristic(node_position, goal)
                neighbor_node = Node(node_position, g_cost, h_cost)

                if neighbor_node not in open_list:
                    heapq.heappush(open_list, neighbor_node)

    return None  # No path found

# Example usage
grid = [
    [0, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 1, 0]
]
start = (0, 0)
goal = (3, 3)
result = astar(start, goal, grid)
print(f"Cost of the path: {result}")
