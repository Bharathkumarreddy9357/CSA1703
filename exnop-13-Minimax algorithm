import math

print("192372258 bharath")
def minimax(board, depth, is_maximizing):
    score = evaluate(board)

    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(board):
            board[move] = 'X'
            best_score = max(best_score, minimax(board, depth + 1, False))
            board[move] = ' '
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(board):
            board[move] = 'O'
            best_score = min(best_score, minimax(board, depth + 1, True))
            board[move] = ' '
        return best_score

def evaluate(board):
    # Check rows, columns, and diagonals for a win
    # Return 10 for 'X', -10 for 'O', and 0 for a draw
    pass  # Implement evaluation logic here

def is_full(board):
    return ' ' not in board

def get_available_moves(board):
    return [i for i, x in enumerate(board) if x == ' ']

# Example usage
board = ['X', 'O', 'X', ' ', 'O', ' ', ' ', ' ', ' ']
print(minimax(board, 0, True))
