from collections import deque

def is_valid_state(m, c):
    return (m == 0 or m >= c) and (3 - m == 0 or 3 - m >= 3 - c)
 print("192372258 bharath")
def get_possible_moves(state):
    m_left, c_left, boat = state
    moves = []
    if boat == 'left':
        for m in range(0, 3):
            for c in range(0, 3):
                if m + c > 0 and m + c <= 2:
                    new_state = (m_left - m, c_left - c, 'right')
                    if is_valid_state(new_state[0], new_state[1]):
                        moves.append(new_state)
    else:
        for m in range(0, 3):
            for c in range(0, 3):
                if m + c > 0 and m + c <= 2:
                    new_state = (m_left + m, c_left + c, 'left')
                    if is_valid_state(new_state[0], new_state[1]):
                        moves.append(new_state)
    return moves

def bfs():
    initial_state = (3, 3, 'left')
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        state, path = queue.popleft()
        if state == (0, 0, 'right'):
            return path + [state]
        if state in visited:
            continue
        visited.add(state)
        for move in get_possible_moves(state):
            queue.append((move, path + [state]))

solution = bfs()
for step in solution:
    print(step)
