% Author: bharath 192372258
% Prolog Program: Best First Search Algorithm

% Define edges in the graph as edge(Node1, Node2, Cost)
edge(a, b, 1).
edge(a, c, 3).
edge(b, d, 1).
edge(b, e, 5).
edge(c, f, 2).
edge(d, g, 1).
edge(e, g, 2).
edge(f, g, 2).

% Define heuristic values as h(Node, HeuristicCost)
h(a, 7).
h(b, 6).
h(c, 5).
h(d, 4).
h(e, 3).
h(f, 6).
h(g, 0).  % Goal node has heuristic value 0

% Best First Search: Entry point
best_first_search(Start, Goal, Path) :-
    bfs([[Start]], Goal, Path).

% bfs(Queue, Goal, Path)
bfs([[Goal | Rest] | _], Goal, Path) :-  % Goal found
    reverse([Goal | Rest], Path).

bfs([[Current | Rest] | Others], Goal, Path) :-
    findall([Next, Current | Rest],
            (edge(Current, Next, _), \+ member(Next, [Current | Rest])),
            Children),
    sort_by_heuristic(Children, SortedChildren),
    append(SortedChildren, Others, NewQueue),
    bfs(NewQueue, Goal, Path).

% Sort paths based on heuristic of the head node
sort_by_heuristic(Paths, Sorted) :-
    map_list_to_pairs(heuristic_of_path, Paths, Pairs),
    keysort(Pairs, SortedPairs),
    pairs_values(SortedPairs, Sorted).

% Get heuristic of the first node in the path
heuristic_of_path([Node | _], H) :-
    h(Node, H).

% Sample Query:
% ?- best_first_search(a, g, Path).
